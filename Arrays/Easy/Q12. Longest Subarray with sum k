Problem Statement: Given an array and a sum k, we need to print the length of the longest subarray that sums to k.
Example 1:
Input Format: N = 3, k = 5, array[] = {2,3,5}
Result: 2
Explanation: The longest subarray with sum 5 is {2, 3}. And its length is 2.

Example 2:
Input Format: N = 5, k = 10, array[] = {2,3,5,1,9}
Result: 3
Explanation: The longest subarray with sum 10 is {2, 3, 5}. And its length is 3.
--------------------------------------------------------------------------------------------------------------------------------
// Difference between subarray and subsequence.
arr=[1,2,3,4,5]
subarray = [1,2]
subsequence = [1,3,5]

Q. Longest subarray with sum k.

// Brute force: Generate all the subarrays and find everyones sum and return the length of maximum.
import java.util.*;

public class Main {
    public static int function(int[] arr, int n, int d) {
      int len = 0;
      for(int i=0;i<n;i++) {
        for(int j=i;j<n;j++) {
          int sum = 0;
          for(int k=i;k<=j;k++) {
            sum += arr[k];
          }
          if(sum == d) {
            len = Math.max(len, j-i+1);
          }
        }
      }
      return len;
    }
    public static void main(String[] args) {
      int[] arr = {3, -2, 5, 1, -4, 3};
      int n = arr.length;
      int d =4;
      int result = function(arr, n, d);
      System.out.println(result);
  }
}
Time Complexity: Appx: O(N^3).
Space Complexity: O(1).
------------------------------------------------------------------------------------------------------------------------------
// Brute Force: O(N^2) Solution:
import java.util.*;

public class Main {
    public static int function(int[] arr, int n, int d) {
      int len = 0;
      for(int i=0;i<n;i++) {
        int sum = 0;
        for(int j=i;j<n;j++) {
          sum += arr[j];
          if(sum == d) {
            len = Math.max(len, j-i+1);
          }
        }
      }
      return len;
    }
    public static void main(String[] args) {
      int[] arr = {2,3,5,1,9};
      int n = arr.length;
      int d = 10;
      int result = function(arr, n, d);
      System.out.println(result);
  }
}
// Time complexity: O(N^2)
// Auxilary Space: O(1)
