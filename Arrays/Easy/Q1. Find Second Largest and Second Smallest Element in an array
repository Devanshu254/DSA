Problem Statement: Given an array, find the second smallest and second largest element in the array. Print ‘-1’ in the event that either of them doesn’t exist.

Brute force approach: [this approach only works if there are no duplicates]
* Sort the array in ascending order
* The element present at the second index is the second smallest element
* The element present at the second index from the end is the second largest element

import java.util.Arrays;

public class Solution {
    public static int[] getSecondOrderElements(int n, int[] a) {
        // If array size is 0 or 1, return -1 for both the elements.
        if (n == 0 || n == 1) {
            return new int[]{-1, -1};
        }
        // Sorting the array.
        Arrays.sort(a);
        // Finding the second smallest and second largest elements.
        int second_smallest = a[1];
        int second_largest = a[n - 2];
        // Returning the result.
        return new int[]{second_smallest, second_largest};
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 4, 7, 7, 5};
        int n = arr.length;
        int[] result = getSecondOrderElements(n, arr);
        System.out.println("Second smallest is " + result[0]);
        System.out.println("Second largest is " + result[1]);
    }
}

Time Complexity -> O(NlogN) + O(N)
