Problem Statement: Given an array of integers, rotating array of elements by k elements either left or right.

Examples:

Example 1:
Input: N = 7, array[] = {1,2,3,4,5,6,7} , k=2 , right
Output: 6 7 1 2 3 4 5
Explanation: array is rotated to right by 2 position .

Example 2:
Input: N = 6, array[] = {3,7,8,9,10,11} , k=3 , left 
Output: 9 10 11 3 7 8
Explanation: Array is rotated to right by 3 position.
--------------------------------------------------------------------------------------------------------------------------------
Brute force approach;
1. Rotate the array by 1 time.
2. Use for loop and rotate that whole k times.
import java.util.*;

public class Main {
    public static void rightRotation(int[] arr, int k, int n) {
      for(int j=0;j<k;j++) {
	// One time array rotation code.
        int temp = arr[n-1];
        for(int i=n-1;i>0;i--) {
          arr[i] = arr[i-1];
        }
        arr[0] = temp;
      }
      System.out.println("Array after rightRotation");
      for(int i=0;i<n;i++) {
        System.out.print(arr[i]+" ");
      }
    }
    public static void main(String[] args) {
      int[] arr = {1,2,3,4,5,6,7};
      int k = 2;
      int n = arr.length;
      rightRotation(arr,k,n);
  }
}
------------------------------------------------------------------------------------------------------------------------------
Brute Force For Left Rotation:
Brute force approach: Left rotate the elements by d places.
import java.util.*;

public class Main {
    public static void leftRotation(int[] arr, int d, int n) {
      // Suppose if d>n then we need below condition.
      d = d%n;
      // Create temp array.
      int[] temp = new int[d];
      // Put first d elements inside temp.
      for(int i=0;i<d;i++) {
        temp[i] = arr[i];
      }
      // left shift array elements by d places.
      for(int i=d;i<n;i++) {
        arr[i-d] = arr[i];
      }
      // Traverse temp array and put the values back inside original array.
      int j=0;
      for(int i=n-d;i<n;i++) {
        arr[i] = temp[j];
        j++;
      }
    }
    public static void main(String[] args) {
      Scanner sc = new Scanner(System.in);
      int n = sc.nextInt();
      int[] arr = new int[n];
      for(int i=0;i<n;i++) {
        arr[i] = sc.nextInt();
      }
      int d = sc.nextInt();
      leftRotation(arr,d,n);
      System.out.println("Array after rotation:");
      for(int i=0;i<n;i++) {
        System.out.print(arr[i]+" ");
      }
  }
}
// Time complexity: O(N)+O(d).
// Space complexity: O(d).
------------------------------------------------------------------------------------------------------------------------------
Optimal Approach: Reversal Algorithm For Left Rotation:
Optimal approach: Reversal Algorithm: for left rotation.
import java.util.*;

public class Main {
    public static void reverse(int[] arr, int left, int right) {
      while(left < right) {
        int temp = arr[left];
        arr[left] = arr[right];
        arr[right] = temp;
        left++;
        right--;
      }
    }
    public static void leftRotation(int[] arr, int d, int n) {
      reverse(arr, 0, d-1);
      reverse(arr, d, n-1);
      reverse(arr, 0, n-1);
    }
    public static void main(String[] args) {
      Scanner sc = new Scanner(System.in);
      int n = sc.nextInt();
      int[] arr = new int[n];
      for(int i=0;i<n;i++) {
        arr[i] = sc.nextInt();
      }
      int d = sc.nextInt();
      leftRotation(arr,d,n);
      System.out.println("Array after rotation:");
      for(int i=0;i<n;i++) {
        System.out.print(arr[i]+" ");
      }
  }
}

// Time complexity of whole program: O(N).
// Space complexity of whole program: O(N). // Considering main function.

// Time complexity of method function: O(N).
// Space complextiy of function: O(1).




