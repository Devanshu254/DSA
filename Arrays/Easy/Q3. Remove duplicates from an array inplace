Problem Statement: Given an integer array sorted in non-decreasing order, remove the duplicates in place such that each 
unique element appears only once. 
The relative order of the elements should be kept the same.
If there are k elements after removing the duplicates, then the first k elements of the array should hold the final result.
It does not matter what you leave beyond the first k elements.
Note: Return k after placing the final result in the first k slots of the array.

// Brute force approach - where we are using hashset.
import java.util.*;

public class Main {
    public static int function(int n, int[] arr) {
      HashSet<Integer> set = new HashSet<>();
      for(int i=0;i<n;i++) {
        set.add(arr[i]);
      }
      int k = set.size();
      int j=0;
      for(int x: set) {
        arr[j++] = x;
      }
      return k;
    }
    public static void main(String[] args) {
      int[] arr = {1,1,2,2,2,3,3};
      int n = arr.length;
      int k = function(n, arr);
      System.out.println("The array after removing the duplicate elements is:");
      for(int i=0;i<k;i++) {
        System.out.print(arr[i]+ " ");
      }
  }
}
// Time Complexity - O(N)[For putting n elements into array]+O(N)[Traversal].
// Space Complexity - O(N).
------------------------------------------------------------------------------------------------------------------------------
Optimal Solution ->
We will use two pointers approach. First we will initialize i=0 then traverse j from 1 and match if arr[j] is not
equals to current element, if it is then we will update i and assign arr[j] within current value;

import java.util.*;

public class Main {
    public static int function(int n, int[] arr) {
      int i = 0;
      for(int j=1;j<n;j++) {
        if(arr[i] != arr[j]) {
          i++;
          arr[i] = arr[j];
        }
      }
      return i+1;
    }
    public static void main(String[] args) {
      int[] arr = {1,1,2,2,2,3,3};
      int n = arr.length;
      int k = function(n, arr);
      System.out.println("The array after removing the duplicate elements is:");
      for(int i=0;i<k;i++) {
        System.out.print(arr[i]+ " ");
      }
  }
}
// Time Complexity - O(N).
// Space Complexity - O(1).
